
@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol Connectable {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct UnexpectedEndpointType : Swift.Error {
  public let endpoint: Network.NWEndpoint
  public init(endpoint: Network.NWEndpoint)
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol BrowserProvider : Swift.Sendable {
  associatedtype Endpoint : Network.Connectable
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
final public class NetworkBrowser<Provider> : Swift.Sendable, Swift.CustomDebugStringConvertible where Provider : Network.BrowserProvider {
  public typealias State = Network.NWBrowser.State
  #if compiler(>=5.3) && $IsolatedAny
  public typealias StateUpdateHandler = @isolated(any) @Sendable (Network.NetworkBrowser<Provider>, Network.NWBrowser.State) -> Swift.Void
  #endif
  public enum Result<T> {
    case finish(T)
    case `continue`
  }
  final public var debugDescription: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init(provider: Provider, using parameters: Network.NWParameters? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  convenience public init(for provider: Provider, using parameters: Network.NWParameters? = nil)
  #endif
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onStateUpdate(@_inheritActorContext _ handler: Network.NetworkBrowser<Provider>.StateUpdateHandler?) -> Self
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  final public func run(@_inheritActorContext _ handler: @escaping @isolated(any) @Sendable ([Provider.Endpoint]) async throws -> Swift.Void) async throws
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  final public func run<Return>(@_inheritActorContext _ handler: @escaping @isolated(any) @Sendable ([Provider.Endpoint]) async throws -> Network.NetworkBrowser<Provider>.Result<Return>) async throws -> Return
  #endif
  @objc deinit
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public enum AdvertisedRoute : Swift.Sendable {
  case car
  case homePod
  case speaker
  public static func == (a: Network.AdvertisedRoute, b: Network.AdvertisedRoute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  case wifiAware(Swift.Int32)

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public enum LinkQuality : Swift.Sendable {
    case unknown
    case minimal
    case moderate
    case good
    public static func == (a: Network.NWPath.LinkQuality, b: Network.NWPath.LinkQuality) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public var isUltraConstrained: Swift.Bool {
    get
  }

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public var linkQuality: Network.NWPath.LinkQuality {
    get
  }

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
final public class NetworkListener<ApplicationProtocol> : Swift.Sendable, Swift.CustomDebugStringConvertible where ApplicationProtocol : Network.NetworkProtocolOptions {
  public typealias State = Network.NWListener.State
  #if compiler(>=5.3) && $IsolatedAny
  public typealias StateUpdateHandler = @isolated(any) @Sendable (_ listener: Network.NetworkListener<ApplicationProtocol>, _ state: Network.NWListener.State) -> Swift.Void
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  public typealias ServiceRegistrationUpdateHandler = @isolated(any) @Sendable (_ listener: Network.NetworkListener<ApplicationProtocol>, _ change: Network.NWListener.ServiceRegistrationChange) -> Swift.Void
  #endif
  final public var debugDescription: Swift.String {
    get
  }
  convenience public init(@Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol) throws
  public init(using builder: Network.NWParametersBuilder<ApplicationProtocol>) throws
  convenience public init(on port: Network.NWEndpoint.Port, @Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol) throws
  public init(on port: Network.NWEndpoint.Port, using builder: Network.NWParametersBuilder<ApplicationProtocol>) throws
  public init(provider: any Network.ListenerProvider, using builder: Network.NWParametersBuilder<ApplicationProtocol>) throws
  convenience public init(for provider: any Network.ListenerProvider, @Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol) throws
  convenience public init(for provider: any Network.ListenerProvider, using builder: Network.NWParametersBuilder<ApplicationProtocol>) throws
  public init(port: Network.NWEndpoint.Port, provider: any Network.ListenerProvider, builder: Network.NWParametersBuilder<ApplicationProtocol>) throws
  convenience public init(on port: Network.NWEndpoint.Port, for provider: any Network.ListenerProvider, @Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol) throws
  convenience public init(on port: Network.NWEndpoint.Port, for provider: any Network.ListenerProvider, using builder: Network.NWParametersBuilder<ApplicationProtocol>) throws
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onStateUpdate(@_inheritActorContext _ handler: Network.NetworkListener<ApplicationProtocol>.StateUpdateHandler?) -> Self
  #endif
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onServiceRegistrationUpdate(@_inheritActorContext _ handler: Network.NetworkListener<ApplicationProtocol>.ServiceRegistrationUpdateHandler?) -> Self
  #endif
  final public func newConnectionLimit(_ limit: Swift.Int) -> Self
  final public var newConnectionLimit: Swift.Int {
    get
    set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  final public var service: Network.NWListener.Service? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public var port: Network.NWEndpoint.Port? {
    get
  }
  #endif
  @objc deinit
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkListener where ApplicationProtocol : Network.OneToOneProtocol {
  #if compiler(>=5.3) && $IsolatedAny
  final public func run(@_inheritActorContext _ handler: @escaping @isolated(any) @Sendable (Network.NetworkConnection<ApplicationProtocol>) async throws -> Swift.Void) async throws
  #endif
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol ListenerProvider {
  var service: Network.NWListener.Service { get }
  var isApplicationService: Swift.Bool { get }
  func configureParameters(_ parameters: Network.NWParameters)
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public var isApplicationService: Swift.Bool {
    get
  }

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public func configureParameters(_ parameters: Network.NWParameters)

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct BonjourListenerProvider : Network.ListenerProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(name: Swift.String? = nil, type: Swift.String, domain: Swift.String? = nil, metadata: Network.NWTXTRecord? = nil, port: Network.NWEndpoint.Port? = nil)
  #endif
  public var service: Network.NWListener.Service {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var port: Network.NWEndpoint.Port? {
    get
  }
  #endif
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.ListenerProvider where Self == Network.BonjourListenerProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func bonjour(name: Swift.String? = nil, type: Swift.String, domain: Swift.String? = nil, port: Network.NWEndpoint.Port? = nil) -> Network.BonjourListenerProvider
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func bonjour(name: Swift.String? = nil, type: Swift.String, domain: Swift.String? = nil, metadata: Network.NWTXTRecord? = nil, port: Network.NWEndpoint.Port? = nil) -> Network.BonjourListenerProvider
  #endif
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol NetworkFixedWidthInteger : Swift.FixedWidthInteger {
  init(bigEndian: Self)
  var bigEndian: Self { get }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.UInt8 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.UInt16 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.UInt32 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.UInt64 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.Int8 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.Int16 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.Int32 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Swift.Int64 : Network.NetworkFixedWidthInteger {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol ConnectionProtocol : Swift.Hashable, Swift.Identifiable {
  associatedtype ApplicationProtocolType : Network.NetworkProtocolOptions
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol NetworkMetadataProtocol {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol NetworkProtocolOptions {
  associatedtype BelowProtocol
  associatedtype ProtocolStorage : Network.ConnectionStorage = Network.DefaultProtocolStorage
  associatedtype Metadata : Network.NetworkMetadataProtocol
  typealias Message<T> = (content: T, metadata: Self.Metadata)
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol ConnectionStorage {
  init()
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct DefaultProtocolStorage : Network.ConnectionStorage, Swift.Sendable {
  public init()
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol OneToOneProtocol : Network.NetworkProtocolOptions {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol MultiplexProtocol : Network.NetworkProtocolOptions {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol StreamProtocol : Network.OneToOneProtocol {
  typealias LegacyMessage = (content: Foundation.Data, metadata: (endOfStream: Swift.Bool, other: [Network.NWProtocolMetadata]?))
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol MessageProtocol : Network.OneToOneProtocol {
  associatedtype LegacyMessage
  associatedtype Receiving
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol DatagramProtocol : Network.MessageProtocol {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
@_functionBuilder public struct ProtocolStackBuilder<ApplicationProtocol, each P> where ApplicationProtocol : Network.NetworkProtocolOptions, repeat each P : Network.NetworkProtocolOptions {
  public static func buildBlock(_ ApplicationProtocolProtocol: ApplicationProtocol, _ belowProtocols: repeat each P) -> (ApplicationProtocol, repeat each P)
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
@_functionBuilder public struct ProtocolMetadataBuilder {
  public static func buildBlock(_ metadata: Network.NWProtocolMetadata...) -> [Network.NWProtocolMetadata]
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol NWParametersProvider {
  var parameters: Network.NWParameters { get }
  #if compiler(>=5.3) && $NonescapableTypes
  func requiredInterface(_ val: Network.NWInterface?) -> Self
  #endif
  func requiredInterfaceType(_ val: Network.NWInterface.InterfaceType) -> Self
  #if compiler(>=5.3) && $NonescapableTypes
  func prohibitedInterfaces(_ val: [Network.NWInterface?]?) -> Self
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func prohibitedInterfaceTypes(_ val: [Network.NWInterface.InterfaceType]?) -> Self
  #endif
  func expensivePathsProhibited(_ val: Swift.Bool) -> Self
  func constrainedPathsProhibited(_ val: Swift.Bool) -> Self
  func noProxiesPreferred(_ val: Swift.Bool) -> Self
  #if compiler(>=5.3) && $NonescapableTypes
  func localEndpoint(_ val: Network.NWEndpoint?) -> Self
  #endif
  func localEndpointReuseAllowed(_ val: Swift.Bool) -> Self
  func localOnly(_ val: Swift.Bool) -> Self
  func peerToPeerIncluded(_ val: Swift.Bool) -> Self
  func dnssecValidationRequired(_ val: Swift.Bool) -> Self
  func serviceClass(_ val: Network.NWParameters.ServiceClass) -> Self
  func multipathServiceType(_ val: Network.NWParameters.MultipathServiceType) -> Self
  func fastOpenAllowed(_ val: Swift.Bool) -> Self
  func expiredDNSBehavior(_ val: Network.NWParameters.ExpiredDNSBehavior) -> Self
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NWParametersProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  public func requiredInterface(_ val: Network.NWInterface?) -> Self
  #endif
  public func requiredInterfaceType(_ val: Network.NWInterface.InterfaceType) -> Self
  #if compiler(>=5.3) && $NonescapableTypes
  public func prohibitedInterfaces(_ val: [Network.NWInterface?]?) -> Self
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func prohibitedInterfaceTypes(_ val: [Network.NWInterface.InterfaceType]?) -> Self
  #endif
  public func expensivePathsProhibited(_ val: Swift.Bool) -> Self
  public func constrainedPathsProhibited(_ val: Swift.Bool) -> Self
  public func noProxiesPreferred(_ val: Swift.Bool) -> Self
  #if compiler(>=5.3) && $NonescapableTypes
  public func localEndpoint(_ val: Network.NWEndpoint?) -> Self
  #endif
  public func localEndpointReuseAllowed(_ val: Swift.Bool) -> Self
  public func localOnly(_ val: Swift.Bool) -> Self
  public func peerToPeerIncluded(_ val: Swift.Bool) -> Self
  public func dnssecValidationRequired(_ val: Swift.Bool) -> Self
  public func serviceClass(_ val: Network.NWParameters.ServiceClass) -> Self
  public func multipathServiceType(_ val: Network.NWParameters.MultipathServiceType) -> Self
  public func fastOpenAllowed(_ val: Swift.Bool) -> Self
  public func expiredDNSBehavior(_ val: Network.NWParameters.ExpiredDNSBehavior) -> Self
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NWParameters : Network.NWParametersProvider {
  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  final public var parameters: Network.NWParameters {
    get
  }
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  final public var parameters: Network.NWParameters {
    get
  }

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct QUICDatagram : Network.DatagramProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let other: [Network.NWProtocolMetadata]?
  }
  public typealias LegacyMessage = (content: Foundation.Data, metadata: [Network.NWProtocolMetadata]?)
  public typealias Receiving = Foundation.Data
  public let belowProtocol: Swift.Void
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Swift.Void
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Swift.Void

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct TLS : Network.StreamProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let endOfStream: Swift.Bool
    public let other: [Network.NWProtocolMetadata]?
  }
  public var nw: Network.nw_protocol_options_t
  public let belowProtocol: Network.TCP
  public init()
  public init(@Network.ProtocolStackBuilder<Network.TCP> _ builder: () -> Network.TCP)
  public func localIdentity(_ identity: Security.sec_identity_t) -> Network.TLS
  #if compiler(>=5.3) && $IsolatedAny
  public func verifyBlock(@_inheritActorContext _ handler: @escaping @isolated(any) @Sendable (Security.sec_protocol_metadata_t, Security.sec_trust_t) async -> Swift.Bool) -> Network.TLS
  #endif
  public enum PeerAuthentication {
    case none
    case optional
    case required
    public static func == (a: Network.TLS.PeerAuthentication, b: Network.TLS.PeerAuthentication) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func peerAuthentication(_ val: Network.TLS.PeerAuthentication) -> Network.TLS
  public func applicationProtocols(_ val: [Swift.String]) -> Network.TLS
  public func cipherSuites(_ val: [Security.tls_ciphersuite_t]) -> Network.TLS
  public func cipherSuiteGroups(_ val: [Security.tls_ciphersuite_group_t]) -> Network.TLS
  public func earlyDataEnabled(_ val: Swift.Bool) -> Network.TLS
  public func ticketsEnabled(_ val: Swift.Bool) -> Network.TLS
  public func minVersion(_ val: Security.tls_protocol_version_t) -> Network.TLS
  public func maxVersion(_ val: Security.tls_protocol_version_t) -> Network.TLS
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Network.TCP
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Network.TCP

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct TCP : Network.StreamProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let endOfStream: Swift.Bool
    public let other: [Network.NWProtocolMetadata]?
  }
  public let belowProtocol: Network.IP
  public init()
  public init(@Network.ProtocolStackBuilder<Network.TCP> _ builder: () -> Network.IP)
  public func noDelay(_ val: Swift.Bool) -> Network.TCP
  public func noPush(_ val: Swift.Bool) -> Network.TCP
  public func noOptions(_ val: Swift.Bool) -> Network.TCP
  public func keepalive(idleTime: Swift.UInt32, count: Swift.UInt32, interval: Swift.UInt32) -> Network.TCP
  public func maximumSegmentSize(_ val: Swift.UInt32) -> Network.TCP
  public func connectionTimeout(_ val: Swift.UInt32) -> Network.TCP
  public func persistTimeout(_ val: Swift.UInt32) -> Network.TCP
  public func retransmitConnectionDropTime(_ val: Swift.UInt32) -> Network.TCP
  public func retransmitFinDrop(_ val: Swift.Bool) -> Network.TCP
  public func ackStretchingDisabled(_ val: Swift.Bool) -> Network.TCP
  public func ecnDisabled(_ val: Swift.Bool) -> Network.TCP
  public func fastOpen(_ val: Swift.Bool) -> Network.TCP
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Network.IP
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Network.IP

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct QUIC : Network.MultiplexProtocol {
  public typealias BelowProtocol = Network.UDP
  public struct Metadata : Network.NetworkMetadataProtocol {
  }
  public let belowProtocol: Network.UDP
  public init(alpn: [Swift.String])
  public init(alpn: [Swift.String], @Network.ProtocolStackBuilder<Network.UDP> _ builder: () -> Network.UDP)
  public struct ProtocolStorage : Network.ConnectionStorage {
    public init()
  }
  public func idleTimeout(_ val: Swift.Int) -> Network.QUIC
  public func maxUDPPayloadSize(_ val: Swift.Int) -> Network.QUIC
  public func initialMaxData(_ val: Swift.Int) -> Network.QUIC
  public func initialMaxStreamDataBidirectionalRemote(_ val: Swift.Int) -> Network.QUIC
  public func initialMaxStreamDataBidirectionalLocal(_ val: Swift.Int) -> Network.QUIC
  public func initialMaxStreamDataUnidirectional(_ val: Swift.Int) -> Network.QUIC
  public func initialMaxBidirectionalStreams(_ val: Swift.Int) -> Network.QUIC
  public func initialMaxUnidirectionalStreams(_ val: Swift.Int) -> Network.QUIC
  public func maxDatagramFrameSize(_ val: Swift.Int) -> Network.QUIC
  public var tls: Network.QUIC.TLS {
    get
  }
  public struct TLS {
    public func localIdentity(_ identity: Security.sec_identity_t) -> Network.QUIC
    #if compiler(>=5.3) && $IsolatedAny
    public func verifyBlock(@_inheritActorContext _ handler: @escaping @isolated(any) @Sendable (Security.sec_protocol_metadata_t, Security.sec_trust_t) async -> Swift.Bool) -> Network.QUIC
    #endif
    public func peerAuthenticationOptional(_ val: Swift.Bool) -> Network.QUIC
    public func peerAuthenticationRequired(_ val: Swift.Bool) -> Network.QUIC
    public func cipherSuites(_ val: [Security.tls_ciphersuite_t]) -> Network.QUIC
  }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct QUICStream : Network.StreamProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let endOfStream: Swift.Bool
    public let other: [Network.NWProtocolMetadata]?
  }
  public let belowProtocol: Swift.Void
  public enum Directionality : Swift.Equatable {
    case unidirectional
    case bidirectional
    public static func == (a: Network.QUICStream.Directionality, b: Network.QUICStream.Directionality) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Initiator : Swift.Equatable {
    case client
    case server
    public static func == (a: Network.QUICStream.Initiator, b: Network.QUICStream.Initiator) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Swift.Void
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Swift.Void

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct UDP : Network.DatagramProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let other: [Network.NWProtocolMetadata]?
  }
  public typealias LegacyMessage = (content: Foundation.Data, metadata: [Network.NWProtocolMetadata]?)
  public typealias Receiving = Foundation.Data
  public let belowProtocol: Network.IP
  public init()
  public init(@Network.ProtocolStackBuilder<Network.IP> _ builder: () -> Network.IP)
  public func noChecksumPreferred(_ val: Swift.Bool) -> Network.UDP
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Network.IP
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Network.IP

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct IP : Network.NetworkProtocolOptions {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let other: [Network.NWProtocolMetadata]?
  }
  public let belowProtocol: Swift.Void
  public init()
  public func version(_ val: Network.NWProtocolIP.Options.Version) -> Network.IP
  public func hopLimit(_ val: Swift.UInt8) -> Network.IP
  public func minimumMTU(_ val: Swift.Bool) -> Network.IP
  public func fragmentationDisabled(_ val: Swift.Bool) -> Network.IP
  public func receiveTimeCalculated(_ val: Swift.Bool) -> Network.IP
  public func localAddressPreference(_ val: Network.NWProtocolIP.Options.AddressPreference) -> Network.IP
  public func multipathLoopbackDisabled(_ val: Swift.Bool) -> Network.IP
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Swift.Void
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = Swift.Void

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct TLV : Network.MessageProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let type: Swift.Int
    public let length: Swift.Int
    public let isComplete: Swift.Bool
    public let lastMessage: Swift.Bool
    public let other: [Network.NWProtocolMetadata]?
  }
  public typealias LegacyMessage = (type: Swift.Int, content: Foundation.Data, metadata: [Network.NWProtocolMetadata]?, isFinal: Swift.Bool)
  public let belowProtocol: any Network.NetworkProtocolOptions
  public init()
  public init<BelowProtocol>(@Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.StreamProtocol
  public init<BelowProtocol>(@Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.MessageProtocol
  public init<T, L, BelowProtocol>(type: T.Type, length: L.Type, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where T : Swift.Sendable, T : Swift.UnsignedInteger, L : Swift.Sendable, L : Swift.UnsignedInteger, BelowProtocol : Network.StreamProtocol
  public init<T, L, BelowProtocol>(type: T.Type, length: L.Type, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where T : Swift.Sendable, T : Swift.UnsignedInteger, L : Swift.Sendable, L : Swift.UnsignedInteger, BelowProtocol : Network.MessageProtocol
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Receiving = Foundation.Data
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Receiving = Foundation.Data

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct Coder<Sending, _Receiving, CoderType> : Network.MessageProtocol where Sending : Swift.Encodable, _Receiving : Swift.Decodable, CoderType : Network.NetworkCoder {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let isComplete: Swift.Bool
    public let lastMessage: Swift.Bool
    public let other: [Network.NWProtocolMetadata]?
  }
  public typealias Receiving = _Receiving
  public typealias LegacyMessage = (content: Network.Coder<Sending, _Receiving, CoderType>.Receiving, metadata: [Network.NWProtocolMetadata]?, isFinal: Swift.Bool)
  public let belowProtocol: any Network.NetworkProtocolOptions
  public init<BelowProtocol>(sending: Sending.Type, receiving: Network.Coder<Sending, _Receiving, CoderType>.Receiving.Type, using: CoderType, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.StreamProtocol
  public init<BelowProtocol>(sending: Sending.Type, receiving: Network.Coder<Sending, _Receiving, CoderType>.Receiving.Type, using: CoderType, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.DatagramProtocol
  public init<BelowProtocol>(receiving: Network.Coder<Sending, _Receiving, CoderType>.Receiving.Type, sending: Sending.Type, using: CoderType, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.StreamProtocol
  public init<BelowProtocol>(receiving: Network.Coder<Sending, _Receiving, CoderType>.Receiving.Type, sending: Sending.Type, using: CoderType, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.DatagramProtocol
  public init(sending: Sending.Type, receiving: Network.Coder<Sending, _Receiving, CoderType>.Receiving.Type, using: CoderType)
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.Coder where Sending : Swift.Decodable, Sending == _Receiving {
  public init<BelowProtocol>(_ type: Sending.Type, using: CoderType, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.StreamProtocol
  public init<BelowProtocol>(_ type: Sending.Type, using: CoderType, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.DatagramProtocol
  public init(_ type: Sending.Type, using: CoderType)
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct WebSocket : Network.MessageProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let opcode: Network.NWProtocolWebSocket.Opcode
    public let closeCode: Network.NWProtocolWebSocket.CloseCode?
    public let isComplete: Swift.Bool
    public let lastMessage: Swift.Bool
    public let other: [Network.NWProtocolMetadata]?
  }
  public typealias LegacyMessage = (type: Network.NWProtocolWebSocket.Opcode, content: Foundation.Data, metadata: [Network.NWProtocolMetadata]?, isFinal: Swift.Bool)
  public let belowProtocol: any Network.NetworkProtocolOptions
  public init()
  public init<BelowProtocol>(@Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.StreamProtocol
  public init<BelowProtocol>(@Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.MessageProtocol
  public func additionalHeaders(_ headers: [(name: Swift.String, value: Swift.String)]) -> Network.WebSocket
  public func subprotocols(_ subprotocols: [Swift.String]) -> Network.WebSocket
  public func autoReplyPing(_ value: Swift.Bool) -> Network.WebSocket
  public func skipHandshake(_ value: Swift.Bool) -> Network.WebSocket
  public func maximumMessageSize(_ value: Swift.Int) -> Network.WebSocket
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Receiving = Foundation.Data
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Receiving = Foundation.Data

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol FramerProtocol {
  static var definition: Network.NWProtocolFramer.Definition { get }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct Framer<T> : Network.MessageProtocol where T : Network.FramerProtocol {
  public struct Metadata : Network.NetworkMetadataProtocol {
    public let framer: Network.NWProtocolFramer.Message
    public let isComplete: Swift.Bool
    public let lastMessage: Swift.Bool
    public let other: [Network.NWProtocolMetadata]?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(framer: Network.NWProtocolFramer.Message, isComplete: Swift.Bool, lastMessage: Swift.Bool, other: [Network.NWProtocolMetadata]?)
    #endif
  }
  public typealias LegacyMessage = (Foundation.Data, Network.Framer<T>.Metadata)
  public typealias Receiving = Foundation.Data
  public var options: Network.NWProtocolFramer.Options
  public let belowProtocol: any Network.NetworkProtocolOptions
  public init<BelowProtocol>(@Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.StreamProtocol
  public init<BelowProtocol>(@Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.MessageProtocol
  public init<BelowProtocol>(using framer: T.Type, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.StreamProtocol
  public init<BelowProtocol>(using framer: T.Type, @Network.ProtocolStackBuilder<BelowProtocol> _ builder: () -> BelowProtocol) where BelowProtocol : Network.MessageProtocol
  public init(using framer: T.Type)
  public static func send<ConnectionType>(connection: ConnectionType, content: Foundation.Data, metadata: Network.Framer<T>.Metadata) async throws where ConnectionType : Network.ConnectionProtocol
  public static func receive<ConnectionType>(connection: ConnectionType) async throws -> Network.Framer<T>.Message<Foundation.Data> where ConnectionType : Network.ConnectionProtocol
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias BelowProtocol = any Network.NetworkProtocolOptions

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ProtocolStorage = Network.DefaultProtocolStorage

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol NetworkEncoder {
  func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
  var isBinary: Swift.Bool { get }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Foundation.JSONEncoder : Network.NetworkEncoder {
  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public var isBinary: Swift.Bool {
    get
  }
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public var isBinary: Swift.Bool {
    get
  }

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Foundation.PropertyListEncoder : Network.NetworkEncoder {
  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public var isBinary: Swift.Bool {
    get
  }
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public var isBinary: Swift.Bool {
    get
  }

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol NetworkDecoder {
  func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Foundation.JSONDecoder : Network.NetworkDecoder {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Foundation.PropertyListDecoder : Network.NetworkDecoder {
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol NetworkCoder : Swift.Sendable {
  associatedtype Encoder : Network.NetworkEncoder
  associatedtype Decoder : Network.NetworkDecoder
  init()
  func makeEncoder() -> Self.Encoder
  func makeDecoder() -> Self.Decoder
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkCoder where Self == Network.NetworkJSONCoder {
  public static var json: Network.NetworkJSONCoder {
    get
  }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkCoder where Self == Network.NetworkPropertyListCoder {
  public static var propertyList: Network.NetworkPropertyListCoder {
    get
  }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct NetworkJSONCoder : Network.NetworkCoder {
  public init()
  public func makeEncoder() -> Foundation.JSONEncoder
  public func makeDecoder() -> Foundation.JSONDecoder
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Decoder = Foundation.JSONDecoder
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Encoder = Foundation.JSONEncoder
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Decoder = Foundation.JSONDecoder

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Encoder = Foundation.JSONEncoder

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct NetworkPropertyListCoder : Network.NetworkCoder {
  public init()
  public func makeEncoder() -> Foundation.PropertyListEncoder
  public func makeDecoder() -> Foundation.PropertyListDecoder
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Decoder = Foundation.PropertyListDecoder
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Encoder = Foundation.PropertyListEncoder
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Decoder = Foundation.PropertyListDecoder

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Encoder = Foundation.PropertyListEncoder

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.ConnectionProtocol {
  public func hash(into hasher: inout Swift.Hasher)
  public var id: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var state: Network.NWConnection.State {
    get
  }
  public var maximumDatagramSize: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var currentPath: Network.NWPath? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var localEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
  public var remoteEndpoint: Network.NWEndpoint {
    get
  }
  public var parameters: Network.NWParameters {
    get
  }
  public var identifier: Swift.UInt64 {
    get
  }
  public func cancelCurrentEndpoint()
  #if compiler(>=5.3) && $NonescapableTypes
  public func metadata(definition: Network.NWProtocolDefinition) -> Network.NWProtocolMetadata?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func establishmentReport() async throws -> Network.NWConnection.EstablishmentReport?
  #endif
  public func startDataTransferReport() -> Network.NWConnection.PendingDataTransferReport
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct NWParametersBuilder<Top, each P> : Network.NWParametersProvider where Top : Network.NetworkProtocolOptions, repeat each P : Network.NetworkProtocolOptions {
  public var parameters: Network.NWParameters
  public static func parameters(@Network.ProtocolStackBuilder<Top, repeat each P> _ builder: () -> (Top, repeat each P)) -> Network.NWParametersBuilder<Top, repeat each P>
  public static func parameters(initialParameters: Network.NWParameters, @Network.ProtocolStackBuilder<Top, repeat each P> _ builder: () -> (Top, repeat each P)) -> Network.NWParametersBuilder<Top, repeat each P>
  public init(auto: () -> (Top, repeat each P))
  public init(@Network.ProtocolStackBuilder<Top, repeat each P> _ builder: () -> (Top, repeat each P))
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NWProtocolIP.Metadata {
  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public func ecn(_ ecn: Network.NWProtocolIP.ECN) -> Self
  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public func serviceClass(_ serviceClass: Network.NWParameters.ServiceClass) -> Self
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public func ecn(_ ecn: Network.NWProtocolIP.ECN) -> Self

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public func serviceClass(_ serviceClass: Network.NWParameters.ServiceClass) -> Self

@_hasMissingDesignatedInitializers @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
final public class NetworkConnection<ApplicationProtocol> : Network.ConnectionProtocol, Swift.Sendable, Swift.CustomDebugStringConvertible where ApplicationProtocol : Network.NetworkProtocolOptions {
  public typealias ApplicationProtocolType = ApplicationProtocol
  public static func == (lhs: Network.NetworkConnection<ApplicationProtocol>, rhs: Network.NetworkConnection<ApplicationProtocol>) -> Swift.Bool
  final public var debugDescription: Swift.String {
    get
  }
  @objc deinit
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ID = Swift.String
  final public var hashValue: Swift.Int {
    get
  }
}

  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias ID = Swift.String

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.OneToOneProtocol {
  convenience public init(to endpoint: Network.NWEndpoint, @Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol)
  convenience public init(to provider: any Network.Connectable, @Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol)
  convenience public init(to endpoint: Network.NWEndpoint, using builder: Network.NWParametersBuilder<ApplicationProtocol>)
  convenience public init(to provider: any Network.Connectable, using builder: Network.NWParametersBuilder<ApplicationProtocol>)
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.MultiplexProtocol {
  convenience public init(to endpoint: Network.NWEndpoint, @Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol)
  convenience public init(to provider: any Network.Connectable, @Network.ProtocolStackBuilder<ApplicationProtocol> using builder: () -> ApplicationProtocol)
  convenience public init(to endpoint: Network.NWEndpoint, using builder: Network.NWParametersBuilder<ApplicationProtocol>)
  convenience public init(to provider: any Network.Connectable, using builder: Network.NWParametersBuilder<ApplicationProtocol>)
  final public func start() -> Self
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.MultiplexProtocol {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var id: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
  final public var state: Network.NWConnection.State {
    get
  }
  final public var maximumDatagramSize: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  final public var currentPath: Network.NWPath? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public var localEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public var remoteEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
  final public var parameters: Network.NWParameters {
    get
  }
  final public var identifier: Swift.UInt64 {
    get
  }
  final public func cancelCurrentEndpoint()
  #if compiler(>=5.3) && $NonescapableTypes
  final public func metadata(definition: Network.NWProtocolDefinition) -> Network.NWProtocolMetadata?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func establishmentReport() async throws -> Network.NWConnection.EstablishmentReport?
  #endif
  final public func startDataTransferReport() -> Network.NWConnection.PendingDataTransferReport
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.OneToOneProtocol {
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onStateUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>, _ state: Network.NWConnection.State) -> Swift.Void)?) -> Self
  #endif
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onPathUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>, _ newPath: Network.NWPath) -> Swift.Void)?) -> Self
  #endif
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onViabilityUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>, _ newViable: Swift.Bool) -> Swift.Void)?) -> Self
  #endif
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onBetterPathUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>, _ newValue: Swift.Bool) -> Swift.Void)?) -> Self
  #endif
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.OneToOneProtocol {
  final public func prependProtocols<NewApplicationProtocol>(@Network.ProtocolStackBuilder<NewApplicationProtocol> _ builder: () -> NewApplicationProtocol) -> Network.NetworkConnection<NewApplicationProtocol> where NewApplicationProtocol : Network.OneToOneProtocol
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.MultiplexProtocol {
  #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
  @discardableResult
  final public func onStateUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>, _ state: Network.NWConnection.State) -> Swift.Void)?) -> Self
  #endif
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol == Network.QUIC {
  final public var securityProtocolMetadata: Security.sec_protocol_metadata_t {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  final public var negotiatedALPN: Swift.String? {
    get
  }
  #endif
  final public var remoteIdleTimeout: Swift.Int {
    get
  }
  final public var applicationError: Network.NWProtocolQUIC.ApplicationError {
    get
    set
  }
  final public var remoteMaxStreamsUnidirectional: Swift.Int {
    get
  }
  final public var remoteMaxStreamsBidirectional: Swift.Int {
    get
  }
  final public var usableDatagramFrameSize: Swift.Int {
    get
  }
  final public var keepAlive: Network.NWProtocolQUIC.Metadata.KeepAliveBehavior {
    get
    set
  }
  final public func openStream(directionality: Network.QUICStream.Directionality = .bidirectional) async throws -> Network.NetworkConnection<Network.QUIC>.SubConnection<Network.QUICStream>
  final public func openStream<NewApplicationProtocol>(directionality: Network.QUICStream.Directionality = .bidirectional, @Network.ProtocolStackBuilder<NewApplicationProtocol> _ prepending: () -> NewApplicationProtocol) async throws -> Network.NetworkConnection<Network.QUIC>.SubConnection<NewApplicationProtocol> where NewApplicationProtocol : Network.OneToOneProtocol
  final public var datagrams: Network.NetworkConnection<Network.QUIC>.SubConnection<Network.QUICDatagram> {
    get async throws
  }
  #if compiler(>=5.3) && $IsolatedAny
  final public func inboundStreams(@_inheritActorContext _ handler: @escaping @isolated(any) @Sendable (Network.NetworkConnection<Network.QUIC>.SubConnection<Network.QUICStream>) async throws -> Swift.Void) async throws
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  final public func inboundStreams<NewApplicationProtocol>(@Network.ProtocolStackBuilder<NewApplicationProtocol> prepending: @escaping () -> NewApplicationProtocol, @_inheritActorContext _ handler: @escaping @isolated(any) @Sendable (Network.NetworkConnection<Network.QUIC>.SubConnection<NewApplicationProtocol>) async throws -> Swift.Void) async throws where NewApplicationProtocol : Network.OneToOneProtocol
  #endif
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.StreamProtocol {
  final public func send<Content>(_ content: Content, endOfStream: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where Content : Foundation.DataProtocol
  final public func send<Value>(_ value: Value, endOfStream: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where Value : Network.NetworkFixedWidthInteger
  final public func sendIdempotent<Content>(_ content: Content, endOfStream: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) where Content : Foundation.DataProtocol
  final public func sendIdempotent<Value>(_ value: Value, endOfStream: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) where Value : Network.NetworkFixedWidthInteger
  final public func receive(atLeast: Swift.Int = 1, atMost: Swift.Int) async throws -> ApplicationProtocol.Message<Foundation.Data>
  final public func receive(exactly: Swift.Int) async throws -> ApplicationProtocol.Message<Foundation.Data>
  final public func receive<Value>(as type: Value.Type) async throws -> ApplicationProtocol.Message<Value> where Value : Network.NetworkFixedWidthInteger
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol == Network.UDP {
  final public func send<Content>(_ content: Content, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where Content : Foundation.DataProtocol
  final public func receive() async throws -> ApplicationProtocol.Message<Foundation.Data>
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol == Network.WebSocket {
  final public func send(_ content: Swift.String, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  final public func sendIdempotent(_ content: Swift.String, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]})
  final public func send<Content>(_ content: Content, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where Content : Foundation.DataProtocol
  final public func sendIdempotent<Content>(_ content: Content, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) where Content : Foundation.DataProtocol
  final public func startSend(_ content: Swift.String, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}, handler: (_ send: (_ content: Swift.String, _ isComplete: Swift.Bool) async throws -> Swift.Void) async throws -> Swift.Void) async throws
  final public func startSend<Content>(_ content: Content, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}, handler: (_ send: (_ content: Content, _ isComplete: Swift.Bool) async throws -> Swift.Void) async throws -> Swift.Void) async throws where Content : Foundation.DataProtocol
  #if compiler(>=5.3) && $NonescapableTypes
  final public func ping<Content>(_ content: Content? = nil, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where Content : Foundation.DataProtocol
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func pong<Content>(_ content: Content? = nil, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where Content : Foundation.DataProtocol
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func close(code: Network.NWProtocolWebSocket.CloseCode = .protocolCode(.normalClosure), reason: Swift.String? = nil, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  #endif
  final public func receive() async throws -> ApplicationProtocol.Message<Foundation.Data>
  final public func startReceive(_ handler: (_ receive: (_ atLeast: Swift.Int, _ atMost: Swift.Int) async throws -> ApplicationProtocol.Message<Foundation.Data>) async throws -> Swift.Void) async throws
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol == Network.TLV {
  final public func send<Content>(_ content: Content, type: Swift.Int, lastMessage: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where Content : Foundation.DataProtocol
  final public func sendIdempotent<Content>(_ content: Content, type: Swift.Int, lastMessage: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) where Content : Foundation.DataProtocol
  final public func receive() async throws -> ApplicationProtocol.Message<Foundation.Data>
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection {
  final public func send<Sending, Receiving, CoderType>(_ content: Sending, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where ApplicationProtocol == Network.Coder<Sending, Receiving, CoderType>, Sending : Swift.Encodable, Receiving : Swift.Decodable, CoderType : Network.NetworkCoder
  final public func receive<Sending, Receiving, CoderType>() async throws -> ApplicationProtocol.Message<Receiving> where ApplicationProtocol == Network.Coder<Sending, Receiving, CoderType>, Sending : Swift.Encodable, Receiving : Swift.Decodable, CoderType : Network.NetworkCoder
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection where ApplicationProtocol : Network.MessageProtocol {
  final public var messages: _Concurrency.AsyncThrowingStream<ApplicationProtocol.Message<ApplicationProtocol.Receiving>, any Swift.Error> {
    get
  }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public protocol SubConnectionProtocol : Network.ConnectionProtocol {
  associatedtype ParentProtocolType : Network.NetworkProtocolOptions
  var parent: Network.NetworkConnection<Self.ParentProtocolType> { get }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection {
  @_hasMissingDesignatedInitializers final public class SubConnection<SubApplicationProtocol> : Network.SubConnectionProtocol, Swift.Sendable, Swift.CustomDebugStringConvertible where SubApplicationProtocol : Network.OneToOneProtocol {
    public typealias ParentProtocolType = ApplicationProtocol
    public typealias ApplicationProtocolType = SubApplicationProtocol
    final public let parent: Network.NetworkConnection<Network.NetworkConnection<ApplicationProtocol>.SubConnection<SubApplicationProtocol>.ParentProtocolType>
    public static func == (lhs: Network.NetworkConnection<ApplicationProtocol>.SubConnection<SubApplicationProtocol>, rhs: Network.NetworkConnection<ApplicationProtocol>.SubConnection<SubApplicationProtocol>) -> Swift.Bool
    #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
    @discardableResult
    final public func onStateUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>.SubConnection<SubApplicationProtocol>, _ state: Network.NWConnection.State) -> Swift.Void)?) -> Self
    #endif
    #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
    @discardableResult
    final public func onPathUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>.SubConnection<SubApplicationProtocol>, _ newPath: Network.NWPath) -> Swift.Void)?) -> Self
    #endif
    #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
    @discardableResult
    final public func onViabilityUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>.SubConnection<SubApplicationProtocol>, _ newViable: Swift.Bool) -> Swift.Void)?) -> Self
    #endif
    #if compiler(>=5.3) && $IsolatedAny && $NonescapableTypes
    @discardableResult
    final public func onBetterPathUpdate(@_inheritActorContext _ handler: (@isolated(any) @Sendable (_ connection: Network.NetworkConnection<ApplicationProtocol>.SubConnection<SubApplicationProtocol>, _ newValue: Swift.Bool) -> Swift.Void)?) -> Self
    #endif
    final public var debugDescription: Swift.String {
      get
    }
    @objc deinit
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ID = Swift.String
    final public var hashValue: Swift.Int {
      get
    }
  }
}

    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ID = Swift.String

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection {
  final public func prependProtocols<NewSubApplicationProtocol>(@Network.ProtocolStackBuilder<NewSubApplicationProtocol> _ builder: () -> NewSubApplicationProtocol) -> Network.NetworkConnection<ApplicationProtocol>.SubConnection<NewSubApplicationProtocol> where NewSubApplicationProtocol : Network.OneToOneProtocol
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection where SubApplicationProtocol : Network.StreamProtocol {
  final public func send(_ content: Foundation.Data, endOfStream: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  final public func sendIdempotent(_ content: Foundation.Data, endOfStream: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]})
  final public func receive(atLeast: Swift.Int = 1, atMost: Swift.Int) async throws -> SubApplicationProtocol.Message<Foundation.Data>
  final public func receive(exactly: Swift.Int) async throws -> SubApplicationProtocol.Message<Foundation.Data>
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection where SubApplicationProtocol == Network.UDP {
  final public func send(_ content: Foundation.Data, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  final public func receive() async throws -> SubApplicationProtocol.Message<Foundation.Data>
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection where SubApplicationProtocol == Network.QUICDatagram {
  final public func send(_ content: Foundation.Data, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  final public func receive() async throws -> SubApplicationProtocol.Message<Foundation.Data>
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection where SubApplicationProtocol == Network.WebSocket {
  final public func send(_ content: Swift.String, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  final public func sendIdempotent(_ content: Swift.String, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]})
  final public func send(_ content: Foundation.Data, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  final public func sendIdempotent(_ content: Foundation.Data, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]})
  final public func startSend(_ content: Swift.String, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}, handler: (_ send: (_ content: Swift.String, _ isComplete: Swift.Bool) async throws -> Swift.Void) async throws -> Swift.Void) async throws
  final public func startSend(_ content: Foundation.Data, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}, handler: (_ send: (_ content: Foundation.Data, _ isComplete: Swift.Bool) async throws -> Swift.Void) async throws -> Swift.Void) async throws
  #if compiler(>=5.3) && $NonescapableTypes
  final public func ping(_ content: Foundation.Data? = nil, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func pong(_ content: Foundation.Data? = nil, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func close(code: Network.NWProtocolWebSocket.CloseCode = .protocolCode(.normalClosure), reason: Swift.String? = nil, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  #endif
  final public func receive() async throws -> SubApplicationProtocol.Message<Foundation.Data>
  final public func startReceive(_ handler: (_ receive: (_ atLeast: Swift.Int, _ atMost: Swift.Int) async throws -> SubApplicationProtocol.Message<Foundation.Data>) async throws -> Swift.Void) async throws
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection where SubApplicationProtocol == Network.TLV {
  final public func send(_ content: Foundation.Data, type: Swift.Int, lastMessage: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws
  final public func sendIdempotent(_ content: Foundation.Data, type: Swift.Int, lastMessage: Swift.Bool = false, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]})
  final public func receive() async throws -> SubApplicationProtocol.Message<Foundation.Data>
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection {
  final public func send<Sending, Receiving, CoderType>(_ content: Sending, @Network.ProtocolMetadataBuilder metadata builder: () -> [Network.NWProtocolMetadata] = {[]}) async throws where SubApplicationProtocol == Network.Coder<Sending, Receiving, CoderType>, Sending : Swift.Encodable, Receiving : Swift.Decodable, CoderType : Network.NetworkCoder
  final public func receive<Sending, Receiving, CoderType>() async throws -> SubApplicationProtocol.Message<Receiving> where SubApplicationProtocol == Network.Coder<Sending, Receiving, CoderType>, Sending : Swift.Encodable, Receiving : Swift.Decodable, CoderType : Network.NetworkCoder
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection where SubApplicationProtocol : Network.MessageProtocol {
  final public var messages: _Concurrency.AsyncThrowingStream<SubApplicationProtocol.Message<SubApplicationProtocol.Receiving>, any Swift.Error> {
    get
  }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NetworkConnection.SubConnection where ApplicationProtocol == Network.QUIC {
  final public var streamID: Swift.UInt64 {
    get
  }
  final public var directionality: Network.QUICStream.Directionality {
    get
  }
  final public var initiator: Network.QUICStream.Initiator {
    get
  }
  final public var streamApplicationErrorCode: Swift.UInt64 {
    get
    set
  }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public struct Bonjour : Network.BrowserProvider {
  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public struct Endpoint : Swift.Equatable, Swift.Identifiable, Swift.Sendable, Network.Connectable, Swift.CustomStringConvertible {
    public let result: Network.NWBrowser.Result
    public let metadata: Network.NWTXTRecord?
    public let name: Swift.String
    public let type: Swift.String
    public let domain: Swift.String
    public static func == (lhs: Network.Bonjour.Endpoint, rhs: Network.Bonjour.Endpoint) -> Swift.Bool
    public var id: Swift.String {
      get
    }
    public var nwEndpoint: Network.NWEndpoint {
      get
    }
    public var description: Swift.String {
      get
    }
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ID = Swift.String
  }
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public struct Endpoint : Swift.Equatable, Swift.Identifiable, Swift.Sendable, Network.Connectable, Swift.CustomStringConvertible {
    public let result: Network.NWBrowser.Result
    public let metadata: Network.NWTXTRecord?
    public let name: Swift.String
    public let type: Swift.String
    public let domain: Swift.String
    public static func == (lhs: Network.Bonjour.Endpoint, rhs: Network.Bonjour.Endpoint) -> Swift.Bool
    public var id: Swift.String {
      get
    }
    public var nwEndpoint: Network.NWEndpoint {
      get
    }
    public var description: Swift.String {
      get
    }
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ID = Swift.String
  }

    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ID = Swift.String

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.BrowserProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func bonjour(_ type: Swift.String, domain: Swift.String? = nil, metadata: Swift.Bool = true) -> Network.Bonjour where Self == Network.Bonjour
  #endif
}

  @available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  final public var allowUltraConstrainedPaths: Swift.Bool {
    get
    set
  }

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.AdvertisedRoute : Swift.Equatable {}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.AdvertisedRoute : Swift.Hashable {}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NWPath.LinkQuality : Swift.Equatable {}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.NWPath.LinkQuality : Swift.Hashable {}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.TLS.PeerAuthentication : Swift.Equatable {}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.TLS.PeerAuthentication : Swift.Hashable {}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.QUICStream.Directionality : Swift.Hashable {}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Network.QUICStream.Initiator : Swift.Hashable {}